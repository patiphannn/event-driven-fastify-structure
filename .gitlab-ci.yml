# GitLab CI/CD Pipeline for User Service
# Clean Architecture Node.js microservice with comprehensive testing

stages:
  - build
  - test
  - integration

# Global variables
variables:
  NODE_VERSION: "18"
  POSTGRES_DB: "test_db"
  POSTGRES_USER: "test_user"
  POSTGRES_PASSWORD: "test_password"
  POSTGRES_HOST_AUTH_METHOD: "trust"
  # Cache configuration
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# Cache node_modules and build artifacts
cache:
  key:
    files:
      - package-lock.json
  paths:
    - .npm/
    - node_modules/
    - dist/

# Build stage - Compile TypeScript and generate Prisma client
build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    - apk add --no-cache git
    - npm ci --cache .npm --prefer-offline
  script:
    # Generate Prisma client
    - npx prisma generate
    # Compile TypeScript
    - npm run build
    # Verify build artifacts exist
    - ls -la dist/
    - test -f dist/server.js
  artifacts:
    name: "build-artifacts-$CI_COMMIT_SHORT_SHA"
    paths:
      - dist/
      - node_modules/@prisma/client/
    expire_in: 1 hour
    reports:
      junit: junit.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Unit Tests with Coverage Analysis
unit-tests:
  stage: test
  image: node:${NODE_VERSION}-alpine
  needs:
    - job: build
      artifacts: true
  before_script:
    - apk add --no-cache git bc
  script:
    # Run unit tests with coverage
    - npm run test:ci
  coverage: '/Lines\s*:\s*(\d+\.?\d*)%/'
  artifacts:
    name: "unit-test-results-$CI_COMMIT_SHORT_SHA"
    paths:
      - coverage/
      - junit.xml
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Integration Tests with Real Database
integration-tests:
  stage: integration
  image: node:${NODE_VERSION}-alpine
  services:
    - name: postgres:15-alpine
      alias: postgres
    - name: redis:7-alpine
      alias: redis
  variables:
    DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    REDIS_URL: "redis://redis:6379"
    NODE_ENV: "test"
    LOG_LEVEL: "silent"
  needs:
    - job: build
      artifacts: true
    - job: unit-tests
  before_script:
    # Install system dependencies
    - apk add --no-cache git postgresql-client bc
    # Wait for services to be ready
    - |
      echo "Waiting for PostgreSQL..."
      until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER}; do
        echo "PostgreSQL is unavailable - sleeping"
        sleep 1
      done
      echo "PostgreSQL is ready!"
  script:
    # Run integration tests
    - npm run test:integration:ci
  artifacts:
    name: "integration-test-results-$CI_COMMIT_SHORT_SHA"
    paths:
      - junit.xml
    reports:
      junit: junit.xml
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Docker Build (Optional - for deployment)
docker-build:
  stage: integration
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay2
  needs:
    - job: unit-tests
    - job: integration-tests
  before_script:
    - docker info
  script:
    # Build Docker image
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    # Test Docker image
    - |
      echo "Testing Docker image..."
      docker run --rm -d --name test-container -p 3000:3000 \
        -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
        -e REDIS_URL="redis://localhost:6379" \
        -e NODE_ENV="production" \
        $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      sleep 10
      docker logs test-container
      docker stop test-container || true
      echo "✅ Docker image test completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  allow_failure: true

# Quality Gates and Rules
.quality_gates: &quality_gates
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: always
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    when: always
  - if: $CI_COMMIT_TAG
    when: always

# Pipeline success notification
pipeline-success:
  stage: .post
  image: alpine:latest
  script:
    - echo "🎉 Pipeline completed successfully!"
    - echo "Build: ✅"
    - echo "Unit Tests (>80% coverage): ✅"
    - echo "Integration Tests: ✅"
    - echo "Commit: $CI_COMMIT_SHORT_SHA"
    - echo "Branch: $CI_COMMIT_REF_NAME"
  rules:
    - <<: *quality_gates
      when: on_success

# Pipeline failure notification
pipeline-failure:
  stage: .post
  image: alpine:latest
  script:
    - echo "❌ Pipeline failed!"
    - echo "Check the failed jobs above for details"
    - echo "Commit: $CI_COMMIT_SHORT_SHA"
    - echo "Branch: $CI_COMMIT_REF_NAME"
  rules:
    - <<: *quality_gates
      when: on_failure
